<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
</head>

<body bgcolor="#000000" text="#FFFF00">

<p><font size="5"><b>InterProcess Communication - The Problems</b></font></p>
<p><font color="#FFFFFF">Microsoft Windows comes with a variety of ways to
implement Inter Process Communication (IPC). Notable among these are the Dynamic
Data Exchange (DDE) APIs, Mailslots and Pipes.&nbsp;</font></p>
<p><font color="#FFFFFF">DDE allows applications to communicate with each other
dynamically. But implementing DDE is no easy job - the DDE APIs tend to be
highly complicated and difficult to implement, especially for the VB
programmer.&nbsp;&nbsp;</font></p>
<p><font color="#FFFFFF">MailSlots and Pipes are basically technologies wherein
virtual temp files are created in the RAM and can be used by apps to store
shareable data. This technique does not tend to be straightforward either and
these methods by itself do not provide notification mechanisms !</font></p>
<p><font color="#FFFFFF">Of course, you could use temp files, but this method is
cumbersome and slow... Then how do we implement Inter Process Communication (IPC)
? Simple - We harness the potential of Microsoft's powerful COM based ActiveX
Technology !</font></p>
<p><font size="5"><b>Easy and Efficient Interprocess Communication (IPC) with
InterCommVB 1.00</b></font></p>
<p><font color="#FFFFFF">InterCommVB allows developers to implement IPC very
easily. With just a few easy to understand calls to this component from the
client and server sides, one can efficiently implement easy and effective
interprocess communication</font></p>
<p><font color="#FFFFFF">What's more - InterCommVB allows multiple data
communication channels to be open and for one channel say if App A is the Server
App and if App B is the Client then for another channel App A could act as the
Client and App B could act as the server ! That's truly two way communication !
And of course, <b>this ActiveX EXE comes with an inbuilt notification system
that notifies both the server and client sides of the data transmission status !
What's more - this component is multithreaded, that is if one communication
channel is blocked or busy, other channels remain unaffected. And the component
now implements real time asynchronous communication, so no more worries about
the server app getting &quot;stuck&quot; waiting for the client app to process
transmitted data</b></font></p>
<p><b><u><a href="http://www.planet-source-code.com/vb/scripts/voting/VoteOnCodeRating.asp?lngWId=1&amp;txtCodeId=25759&amp;optCodeRatingValue=5">IF
YOU FIND IT USEFUL, PLEASE VOTE. THANK YOU !</a></u></b><a href="http://www.planet-source-code.com/vb/scripts/voting/VoteOnCodeRating.asp?lngWId=1&amp;txtCodeId=25759&amp;optCodeRatingValue=5"><br>
</a></p>
<p>&nbsp;&nbsp; <font color="#FFFFFF"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b></font></p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>
